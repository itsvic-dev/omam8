Program <- (NL* Line NL*)+ EOF
Line <- (WHITESPACE* Comment) / WHITESPACE* (LabelStart (WHITESPACE* (Instruction / AssemblerDirective))? / Instruction / AssemblerDirective) (WHITESPACE* Comment)?

Comment <- ';' (!NL .)* NL

Instruction <- ((Opcode WHITESPACE+ (Argument SEP?)+) / Opcode) { handle_instruction(); }
Opcode <- < [a-z] [a-z0-9]+ > { handle_opcode(yytext); }

Argument <- LabelMention / Address / Number / Register

Register <- '%' < ('ba' / 'dc' / 'sp' / 'pc' / 'a' / 'b' / 'c' / 'd') > { handle_register(yytext); }

Address <- '[' NumberBase ']' { handle_address(yytext); }
Number <- NumberBase { handle_number(yytext); }
NumberBase <- <(('0b' [01]+) / ('0x' [0-9a-fA-F]+) / [0-9]+)>

LabelStart <- LabelBase ':' { handle_new_label(yytext); }
LabelMention <- '.' LabelBase { handle_label_mention(yytext); }
LabelBase <- <[a-zA-Z_][a-zA-Z0-9_]*>

AssemblerDirective <- '#' (DirectiveData / DirectiveAsciiz)
DirectiveData <- 'data' WHITESPACE+ NumberBase { handle_directive_data(yytext); }
DirectiveAsciiz <- 'asciiz' WHITESPACE+ '"' <(!'"' !NL .)*> '"' { handle_directive_asciiz(yytext); }

TAB <- '\t'+
SPACE <- ' '+
WHITESPACE <- TAB / SPACE
SEP <- ',' WHITESPACE*
NL <- '\r\n' / '\r' / '\n'
EOF <- !.
